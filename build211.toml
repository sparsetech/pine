[package]
url          = "https://github.com/sparsetech/pine/"
name         = "pine"
organisation = "tech.sparse"
developers   = [["tindzk", "Tim Nieradzik", "tim@sparse.tech"]]

[project]
scalaVersion   = "2.11.11-bin-typelevel-4"
scalaJsVersion = "0.6.28"
scalaNativeVersion = "0.3.7"
scalaOptions   = [
    "-deprecation",                      # Emit warning and location for usages of deprecated APIs.
    "-encoding", "utf-8",                # Specify character encoding used by source files.
    "-explaintypes",                     # Explain type errors in more detail.
    "-feature",                          # Emit warning and location for usages of features that should be imported explicitly.
    "-language:existentials",            # Existential types (besides wildcard types) can be written and inferred
    "-language:experimental.macros",     # Allow macro definition (besides implementation and application)
    "-language:higherKinds",             # Allow higher-kinded types
    "-unchecked",                        # Enable additional warnings where generated code depends on assumptions.
    "-Xcheckinit",                       # Wrap field accessors to throw an exception on uninitialized access.
    "-Xfatal-warnings",                  # Fail the compilation if there are any warnings.
    "-Xlint:adapted-args",               # Warn if an argument list is modified to match the receiver.
    "-Xlint:delayedinit-select",         # Selecting member of DelayedInit.
    "-Xlint:doc-detached",               # A Scaladoc comment appears to be detached from its element.
    "-Xlint:inaccessible",               # Warn about inaccessible types in method signatures.
    "-Xlint:infer-any",                  # Warn when a type argument is inferred to be `Any`.
    "-Xlint:missing-interpolator",       # A string literal appears to be missing an interpolator id.
    "-Xlint:nullary-override",           # Warn when non-nullary `def f()' overrides nullary `def f'.
    "-Xlint:nullary-unit",               # Warn when nullary methods return Unit.
    "-Xlint:option-implicit",            # Option.apply used implicit view.
    "-Xlint:package-object-classes",     # Class or object defined in package object.
    "-Xlint:poly-implicit-overload",     # Parameterized overloaded implicit methods are not visible as view bounds.
    "-Xlint:private-shadow",             # A private field (or class parameter) shadows a superclass field.
    "-Xlint:stars-align",                # Pattern sequence wildcard must align with sequence component.
    "-Xlint:type-parameter-shadow",      # A local type parameter shadows a type already in scope.
#    "-Ywarn-dead-code",                  # Warn when dead code is identified.
    "-Ywarn-numeric-widen",              # Warn when numerics are widened.

    ### pre-13 options ###
    
    "-Xfuture",                          # Turn on future language features.
    "-Xlint:by-name-right-associative",  # By-name parameter of right associative operator.
    "-Xlint:unsound-match",              # Pattern match may not be typesafe.
    "-Yliteral-types",                   # ... this is why we need the typelevel org
    "-Yno-adapted-args",                 # Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver.
    "-Ypartial-unification",             # Enable partial unification in type constructor inference
    "-Ywarn-inaccessible",               # Warn about inaccessible types in method signatures.
    "-Ywarn-infer-any",                  # Warn when a type argument is inferred to be `Any`.
    "-Ywarn-nullary-override",           # Warn when non-nullary `def f()' overrides nullary `def f'.
    "-Ywarn-nullary-unit",               # Warn when nullary methods return Unit.
]
scalaOrganisation = "org.typelevel"
testFrameworks = [
  "org.scalatest.tools.Framework",
  "org.scalacheck.ScalaCheckFramework"
]

[module.pine]
root    = "src/main/scala"
sources = ["src/main/scala"]
targets = ["js", "jvm", "native"]

[module.pine.test]
sources   = ["src/test/scala"]
targets   = ["js", "jvm"]
scalaDeps = [
  ["org.scalatest" , "scalatest" , "3.0.8" ],
  ["org.scalacheck", "scalacheck", "1.14.0"]
]

[module.pine.jvm]
root    = "src/main/scala-jvm"
sources = ["src/main/scala-jvm"]

[module.pine.js]
root    = "src/main/scala-js"
sources = ["src/main/scala-js"]
scalaDeps = [
  ["org.scala-js", "scalajs-dom", "0.9.7"]
]

[module.pine.test.js]
jsdom   = true
sources = ["src/test/scala-js"]
